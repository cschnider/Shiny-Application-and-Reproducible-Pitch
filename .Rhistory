library(pgmm)
library(rattle)
library(caret)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
#SAheart<-SAheart[c("age", "alcohol", "obesity", "tobacco", "typea", "ldl", "chd")]
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(1234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
library(ElemStatLearn)
library(ElemStatLearn)
library(pgmm)
library(rattle)
library(caret)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
set.seed(1234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
set.seed(13234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
ModelFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data = trainSA,
method = "glm",family="binomial"
)
library(ElemStatLearn)
library(ElemStatLearn)
library(pgmm)
library(rattle)
library(caret)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
ModelFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data = trainSA,
method = "glm",family="binomial"
)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
library(ElemStatLearn)
library(ElemStatLearn)
library(pgmm)
library(rattle)
library(caret)
data(SAheart)
install.packages("caret")
library(ElemStatLearn)
library(ElemStatLearn)
library(pgmm)
library(rattle)
library(caret)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
ModelFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data = trainSA,
method = "glm",family="binomial"
)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
library(ElemStatLearn)
library(ElemStatLearn)
library(pgmm)
library(rattle)
library(caret)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
library(ElemStatLearn)
library(ElemStatLearn)
library(pgmm)
library(rattle)
library(caret)
data(SAheart)
library(caret)
install.packages("ggplot2")
library(caret)
library(caret)
install.packages("colorspace")
library(caret)
install.packages("caret",dependencies=TRUE)
library(caret)
install.packages("brglm",dependencies=TRUE)
library(caret)
install.packages("gtools",dependencies=TRUE)
library(caret)
install.packages("lme4",dependencies=TRUE)
library(caret)
install.packages("quantreg",dependencies=TRUE)
library(caret)
install.packages("quantreg",dependencies=TRUE)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
ModelFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data = trainSA,
method = "glm",family="binomial"
)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
install.packages("quantreg", dependencies = TRUE)
library(ElemStatLearn)
library(ElemStatLearn)
library(pgmm)
library(rattle)
library(caret)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
ModelFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data = trainSA,
method = "glm",family="binomial"
)
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(model, trainSA))
library(ElemStatLearn)
library(pgmm)
library(rattle)
library(caret)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
library(pgmm)
library(rattle)
library(caret)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
install.packages("randomForest")
fit <- randomForest(y~.,data=vowel.train)
library(randomForest)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
library(rattle)
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
fancyRpartPlot(fit$finalModel)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
summary(segmentationOriginal$Case)
inTrain <- grep("Train",segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
fit <- train(Class~.,data=training,method="rpart")
fancyRpartPlot(fit$finalModel)
predData <- training[1:3,]
which(colnames(training)=="TotalIntenCh2")
which(colnames(training)=="FiberWidthCh1")
which(colnames(training)=="PerimStatusCh1")
#TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
#FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
predData[1,c(103,50,85)]=c(23000,10,2)
predData[2,c(103,50,85)]=c(50000,10,100)
predData[3,c(103,50,85)]=c(57000,8,100)
predict(fit,predData)
data(vowel.train)
data(vowel.test)
vowel = rbind(vowel.test,vowel.train)
vowel$y = factor(vowel$y)
vowel.train$y = factor(vowel.train$y)
set.seed(33833)
fit <- randomForest(y~.,data=vowel.train)
imps <- varImp(fit)
order(imps)
install.packages("pdflatex", dependencies=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
str(vowel.train)
class(vowel.train$y)
library(caret)
?train
vowel.train$y = factor(vowel.train$y)
vowel.test$y = factor(vowel.test$y)
vowel.train$y = factor(vowel.train$y)
vowel.test$y = factor(vowel.test$y)
model_rf <- train(y ~ ., data = vowel.train,method ="rf")
model_rf <- train(y ~ ., data = vowel.train, method ="gbm")
vowel.train$y = factor(vowel.train$y)
vowel.test$y = factor(vowel.test$y)
model_rf <- train(y ~ ., data = vowel.train,method ="rf")
model_gbm <- train(y ~ ., data = vowel.train, method ="gbm")
model_rf
model_gbm
model_rf
model_gbm
model_rf
model_rf$finalModel
pred_tree = predict(model_rf, vowel.test)
pred_gbm = predict(model_gbm, vowel.test)
pred_tree
tree_accuracy = sum(pred_tree == vowel.test$y) / length(pred_tree)
gbm_accuracy = sum(pred_gbm == vowel.test$y) / length(pred_tree)
tree_accuracy
gbm_accuracy
agreeSub = vowel.test[pred_tree == pred_gbm,]
pred_comb = predict(model_tree, agreeSub)
comb_accuracy = sum(pred_comb == agreeSub$y) / length(pred_comb)
model_rf$finalModel
model_gbm$finalModel
pred_rf = predict(model_rf, vowel.test)
pred_gbm = predict(model_gbm, vowel.test)
tree_accuracy = sum(pred_tree == vowel.test$y) / length(pred_tree)
gbm_accuracy = sum(pred_gbm == vowel.test$y) / length(pred_tree)
agreeSub = vowel.test[pred_rf == pred_gbm,]
pred_comb = predict(model_rf, agreeSub)
comb_accuracy = sum(pred_comb == agreeSub$y) / length(pred_comb)
agreeSub
pred_comb
comb_accuracy
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
str(vowel.train)
class(vowel.train$y)
library(caret)
vowel.train$y = factor(vowel.train$y)
vowel.test$y = factor(vowel.test$y)
model_rf <- train(y ~ ., data = vowel.train,method ="rf")
model_gbm <- train(y ~ ., data = vowel.train, method ="gbm")
model_rf$finalModel
model_gbm$finalModel
pred_rf = predict(model_rf, vowel.test)
pred_gbm = predict(model_gbm, vowel.test)
tree_accuracy = sum(pred_tree == vowel.test$y) / length(pred_tree)
gbm_accuracy = sum(pred_gbm == vowel.test$y) / length(pred_tree)
agreeSub = vowel.test[pred_rf == pred_gbm,]
pred_comb = predict(model_rf, agreeSub)
comb_accuracy = sum(pred_comb == agreeSub$y) / length(pred_comb)
tree_accuracy
gbm_accuracy
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(forecast)
library(lubridate)
# Question 1 --------------------------------------------------------------
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = factor(vowel.train$y)
vowel.test$y = factor(vowel.test$y)
set.seed(33833)
model_tree = train(y ~ ., data = vowel.train, method = 'rf')
model_gbm = train(y ~ ., data = vowel.train, method = 'gbm')
pred_tree = predict(model_tree, vowel.test)
pred_gbm = predict(model_gbm, vowel.test)
# Get the accuracy for the tree and the gbm
tree_accuracy = sum(pred_tree == vowel.test$y) / length(pred_tree)
gbm_accuracy = sum(pred_gbm == vowel.test$y) / length(pred_tree)
# Get the last part of the answer
agreeSub = vowel.test[pred_tree == pred_gbm,]
pred_comb = predict(model_tree, agreeSub)
comb_accuracy = sum(pred_comb == agreeSub$y) / length(pred_comb)
# The solution is the one with:
#   RF Accuracy = 0.6061
#   GBM Accuracy = 0.5325
#   Agreement Accuracy = 0.6518
# My solutions were:
#   RF Accuracy = 0.6061
#   GBM Accuracy = 0.5260
#   Agreement Accuracy = 0.6389
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tree_accuracy
gbm_accuracy
training
View(testing)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
model_tree = train(diagnosis ~ ., data = training, method = 'rf')
model_gbm = train(diagnosis ~ ., data = training, method = 'gbm')
model_lda = train(diagnosis ~ ., data = training, method = 'lda')
set.seed(62433)
model_rf = train(diagnosis ~ ., data = training, method = 'rf')
model_gbm = train(diagnosis ~ ., data = training, method = 'gbm')
model_lda = train(diagnosis ~ ., data = training, method = 'lda')
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_gbm_test = predict(model_gbm, testing)
pred_lda_test = predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
pred_rf = predict(model_rf, training)
pred_gbm = predict(model_gbm, training)
pred_lda = predict(model_lda, training)
comb_data = data.frame(rf = pred_rf, gbm = pred_gbm, lda = pred_lda, diagnosis = training$diagnosis)
model_comb = train(diagnosis ~ ., method = 'rf', data = comb_data)
pred_rf_test = predict(model_rf, testing)
pred_gbm_test = predict(model_gbm, testing)
pred_lda_test = predict(model_lda, testing)
comb_data_test = data.frame(rf = pred_rf_test, gbm = pred_gbm_test, lda = pred_lda_test, diagnosis = testing$diagnosis)
pred_comb_test = predict(model_comb, comb_data_test)
accuracy_rf = sum(pred_rf_test == testing$diagnosis) / length(pred_rf_test)
accuracy_gbm = sum(pred_gbm_test == testing$diagnosis) / length(pred_gbm_test)
accuracy_lda = sum(pred_lda_test == testing$diagnosis) / length(pred_lda_test)
accuracy_comb = sum(pred_comb_test == comb_data_test$diagnosis) / length(pred_comb_test)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
model = train(CompressiveStrength ~ ., method = 'lasso', data = training)
set.seed(233)
model = train(CompressiveStrength ~ ., method = 'lasso', data = training)
plot(model$finalModel)
plot.enet(model$finalModel)
plot.enet(model$finalModel)
plot.enet(model$finalModel)
rm(list = ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model = svm(CompressiveStrength ~ ., data = training)
model
pred = predict(model, testing)
RMSE = sqrt(sum((pred - testing$CompressiveStrength)^2))
predins = predict(model, training)
RMSEins = sqrt(sum((predins - training$CompressiveStrength)^2))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
require(e1071)
M <- svm(CompressiveStrength ~ ., data=training)
testing$hat <- predict(M, testing)
testing$error <- testing$CompressiveStrength - testing$hat
rmse <- sqrt(mean(testing$error ^ 2))
rmse
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
M1 <- train(CompressiveStrength ~ ., data=training, method="lasso")
M1
plot(M1$finalModel, xvar="penalty")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(manipulate)
library(manipulate)
install.packaes(manipulate)
install.packages(manipulate)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
shiny::runApp('R/Coursera/08 Developing Data Products')
shiny::runApp('R/Coursera/08 Developing Data Products')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
setwd("~/R/Coursera/08 Developing Data Products")
library(shiny)
library(shiny)
install.packages('shiny')
library(shiny)
runApp()
setwd("~/R/Coursera/08 Developing Data Products")
library(shiny)
runApp()
runApp(launch.browser = getOption("shiny.launch.browser")
runApp()
runApp()
shinyapps::setAccountInfo(name='tailor',
token='C6F4F083A4F2447A130A8EF3F7DE7CA2',
secret='HiJV0itMxBB9jCyfVEm/Sb7W12PbjtJWZV861bMg')
install.packages(c('ggplot2'))
setwd("~/R/Coursera/08 Developing Data Products")
library(shiny)
deployApp()
runApp()
deployApp()
library(shinyapps)
deployApp()
deployApp()
deployApp()
deployApp(appName="erruption_hist")
install.packages("knitr")
date: 26-04-2015
PitchPresentation
========================================================
author: cschnider
date: 26-04-2015
First Slide
========================================================
For more details on authoring R presentations click the
**Help** button on the toolbar.
- Bullet 1
- Bullet 2
- Bullet 3
Slide With Code
========================================================
```{r}
summary(cars)
```
Slide With Plot
========================================================
```{r, echo=FALSE}
plot(cars)
```
PitchPresentation
